@startuml
'https://plantuml.com/class-diagram

abstract class CapCalculator
abstract class ModuleList
class CapCalculatorByMc
class CapCalculatorByCode
class ModuleListCapCalculator
class GradeSuggestionCalculator
class CalculatorModuleList
class ModuleDb

CapCalculator ^-- CapCalculatorByMc
CapCalculator ^-- CapCalculatorByCode
CapCalculatorByCode ^-- ModuleListCapCalculator
CapCalculatorByCode ^-- GradeSuggestionCalculator
ModuleList ^-- CalculatorModuleList

CapCalculator --> "1" CalculatorModuleList
CapCalculatorByCode --> "1" ModuleDb

class CapCalculator {
# invalidModules : ArrayList<String>
+ CapCalculator()
# checkModulesNotEmpty() : void
# calculateCurrentCap(totalMc : double, cap : double, mc : int, gradePoint : double) : double
# getCap() : String {abstract}
# checkInvalidModules() : void
+ executeCapCalculator() : String
}

class CapCalculatorByMc {
- getInputModules(input : String) : void
+ CapCalculatorByMc(input : String)
# getCap() : String
}

class CapCalculatorByCode {
- isValidGrade(moduleGrade : String) : boolean
- getInputModules(input : String) : void
+ CapCalculatorByCode(input : String)
+ CapCalculatorByCode(modules : ModuleList)
# getCap() : String
}

class ModuleListCapCalculator {
+ ModuleListCapCalculator(modules : ModuleList)
- checkAllModulesNotAvailable() : void
+ executeCapCalculator() : String
}

class GradeSuggestionCalculator {
- userDesiredCap : String
+ GradeSuggestionCalculator(modules : ModuleList, userDesiredCap : String)
- checkInvalidDesiredCap() : void
- getMcModulesWithGrade() : double
- getMcModulesWithoutGrade() : double
- getGradeLetter(gradePoint : double) : String
- getMinimumGrade(currentCap : double, mcModuleWithGrade : double, mcModuleWithoutGrade : double) String
- getExpectedGrade() : String
+ executeCapCalculator() : String
}

class CalculatorModuleList {
+ CalculatorModuleList()
+ CalculatorModuleList(moduleList : ModuleList)
+ storeModuleMcGrade(mc : int, grade : String) : void
+ storeModuleCodeGrade(code : String, grade : String) : void
}


@enduml